# :help UltiSnips for options e.g. b: only at start of line
# GENERAL ==================================================
snippet td "TODO" b
// TODO: ${1:desc} (`!v strftime("%x - %H:%M")` @`echo $USER`)
endsnippet

snippet fm "FIXME" b
// FIXME: ${1:desc} (`!v strftime("%x - %H:%M")` @`echo $USER`)
endsnippet

snippet doc "JSDoc description" b
/**
 * ${1}
 */
endsnippet

snippet pdoc "JSDoc param"
@param {${1}} ${2}
endsnippet

snippet mlog "Functional logger"
.map(o => console.log(o) || o)
endsnippet

snippet # "H1 Comment" b
/*==========================================================
  $1
==========================================================*/
endsnippet

snippet ## "H2 Comment" b
/* -$1------------------------------------------------------*/
endsnippet

snippet stb "Stubbed-out function error" b
throw new Error(
  'This function has not been implemented. Please add' +
  'code and tests to use it'
)
endsnippet

snippet rsc "React Styled Component" b
import styled from 'styled-components'

export const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
	$3
\`
endsnippet

snippet rscc "Styled Component with CSS" b
import styled, { css } from 'styled-components'

export const $1 = styled.${2:div}(({ theme }) => css\`
	$3
\`);
endsnippet

snippet sc "React Styled Component" b
export const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
	$3
\`
endsnippet

snippet scc "React Styled Component using CSS" b
export const $1 = styled.${2:div}(({ theme }) => css\`
	$3
\`);
endsnippet

snippet rnsc "React Native Styled Component" b
import styled from 'styled-components/native'

const ${1:`!v expand('%:t:r')`} = styled.${2:View}\`
	$3
\`

export default $1
endsnippet


# JEST =====================================================

snippet dsc "Describe block" b
describe('${1:`!v expand('%:t:r:s?\.test$??')`}', () => {
  it('${2:$1}', () => {
		$3
  })
})
endsnippet

snippet it "It block" b
it('$1', ${3:()} => {
	$2
})
endsnippet

#Â NODE =====================================================
snippet r.p "router.post" b
router.post('/$1', (req, res, next) => {
	$2
})
endsnippet

snippet r.g "router.get" b
router.get('/$1', (req, res, next) => {
	$2
})
endsnippet

snippet r.d "router.post" b
router.delete('/$1', (req, res, next) => {
	$2
})
endsnippet

snippet r.pu "router.post" b
router.put('/$1', (req, res, next) => {
	$2
})
endsnippet

# ES2015 ===================================================
snippet "r" "const requrie" br
const $1 = require('${2:$1}')
endsnippet

snippet "req" "require" br
require('$1')
endsnippet

snippet "ri" "const requrie internal" br
const $1 = require('${2:.}/${2:$1}')
endsnippet

snippet "i(m)?" "import" br
import ${1} from '${2:$1}'
endsnippet

snippet "ii" "import" br
import ${1} from '${2:.}/${3:$1}'
endsnippet

snippet "ex(port|p)?" "export" br
export { $1 }
endsnippet

snippet "ed" "export default" br
export default ${1:`!v expand('%:t:r')`}

endsnippet

snippet ie "Import file then export" b
import ${1} from '${2:./}${3:$1}'

export ${4:default} $1
endsnippet

snippet :f "method: func(...) { ... }"
${1:key}: ${2:(args)} => {
	return $4
}${3:,}
endsnippet

snippet "\.(map|filter|forEach|reduce|some)" "Array method with an arrow function" r
.`!p snip.rv = match.group(1)`(${1:(c, i)} => {
	return $2
})
endsnippet

snippet "\.(map|filter|forEach|reduce|some)=" "Array method with an arrow function inline" rA
.`!p snip.rv = match.group(1)`(${1:(c, i)} => $2)
endsnippet

snippet => "Arrow function"
(${1:args}) => {
	return $3
}
endsnippet

snippet =>> "Inline arrow function" A
(${1:args}) => ($2)
endsnippet

snippet fn "Const Function" bA
const ${1:name} = (${2:args}) => {
	return $4
}
endsnippet

snippet cl "console.log('var', var)"
console.log('${2:$1: }', ${1})
endsnippet

snippet cll "console.log('')"
console.log('${1}')
endsnippet
