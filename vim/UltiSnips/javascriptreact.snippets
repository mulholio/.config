snippet pstate "Print state" b
<pre>{JSON.stringify(this.state, null, 2)}</pre>
endsnippet

snippet pprops "Print props" b
<pre>{JSON.stringify(this.props, null, 2)}</pre>
endsnippet

snippet re "Import react" b
import React${1: }from 'react'
endsnippet

snippet st "Import styled-components" b
import styled${2: }from '$1styled-components'
endsnippet

snippet ssc "Import styled-components namespace" b
import * as S from '${2: }'
endsnippet

snippet rfc "React Functional Component" b
import React from 'react'

const ${1:`!v expand('%:t:r')`} = () => (
	<div>
	</div>
)

export default $1
endsnippet

snippet rsc "React Styled Component" b
import styled from 'styled-components'

const ${1:`!v expand('%:t:r')`} = styled.${2:div}\`
	$3
\`

export default $1
endsnippet

snippet rnsc "React Native Styled Component" b
import styled from 'styled-components/native'

const ${1:`!v expand('%:t:r')`} = styled.${2:View}\`
	$3
\`

export default $1
endsnippet

snippet pp "Get Props"
${props => props.${1}}
endsnippet

snippet cn "className"
className="$1"
endsnippet

# Tailwind
snippet cnt "className tailwind"
className={`
	$1
`}
endsnippet

snippet dp "Default Props" b
${1:`!v expand('%:t:r')`.}defaultProps = {
	$2
}
endsnippet

snippet set "Set State"
this.setState({
	${1}: ${2}
})
endsnippet

snippet ref "Ref" i
ref={${1:ref} => { this.${2:name} = $1 }}
endsnippet

snippet j/ "JSX Comment" b
{/* $1 */}
endsnippet

snippet jtd "JSX TODO Comment" b
{/* TODO: ${1:desc} (`!v strftime("%x - %H:%M")` @`echo $USER`) */}
endsnippet

snippet jfm "JSX FIXME Comment" b
{/* FIXME: ${1:desc} (`!v strftime("%x - %H:%M")` @`echo $USER`) */}
endsnippet

# PropTypes

snippet ipt "PropTypes importa" b
import PropTypes from 'prop-types'
endsnippet

snippet pt "PropTypes Definition" b
${1:`!v expand('%:t:r')`.}propTypes = {
	${2:className}: ${3:PropTypes.string},
}
endsnippet

snippet  pt.a "PropTypes Array" w
PropTypes.array${1:,}
endsnippet

snippet   pt.b "PropTypes Boolean" w
PropTypes.bool${1:,}
endsnippet

snippet pt.f "PropTypes Function" w
PropTypes.func${1:,}
endsnippet

snippet pt.n "PropTypes Number" w
PropTypes.number${1:,}
endsnippet

snippet pt.o "PropTypes Object" w
PropTypes.object${1:,}
endsnippet

snippet pt.s "PropType String" w
PropTypes.string${1:,}
endsnippet

snippet pt.no "PropTypes Node" w
PropTypes.node${1:,}
endsnippet

snippet pt.e "PropTypes Element" w
PropTypes.element${1:,}
endsnippet

snippet pt.io "PropTypes instanceOf" w
PropTypes.instanceOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.one "PropTypes oneOf" w
PropTypes.oneOf(['$2'$3])${1:,}
endsnippet

snippet pt.onet "PropTypes oneOfType" w
PropTypes.oneOfType([
	$2
])${1:,}
endsnippet

snippet pt.ao "PropTypes arrayOf" w
PropTypes.arrayOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.oo "PropTypes objectOf" w
PropTypes.objectOf(${2:PropTypes.string})${1:,}
endsnippet

snippet pt.sh "PropTyes Shape" w
PropTypes.shape({
	$2
})${1:,}
endsnippet

snippet ir "isRequired" w
isRequired,
endsnippet

