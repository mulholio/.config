(function(e, a) { for(var i in a) e[i] = a[i]; if(a.__esModule) Object.defineProperty(e, "__esModule", { value: true }); }(exports,
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ([
/* 0 */
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.activate = void 0;
const coc_nvim_1 = __webpack_require__(1);
const typeScriptExtensionId = 'coc-tsserver';
const pluginId = 'typescript-styled-plugin';
const configurationSection = 'styled-components';
async function activate(context) {
    const tsExtension = coc_nvim_1.extensions.getExtension(typeScriptExtensionId).extension;
    if (!tsExtension) {
        return;
    }
    await tsExtension.activate();
    if (!tsExtension.exports) {
        return;
    }
    const api = tsExtension.exports;
    if (!api) {
        return;
    }
    coc_nvim_1.workspace.onDidChangeConfiguration(e => {
        if (e.affectsConfiguration(configurationSection)) {
            synchronizeConfiguration(api);
        }
    }, null, context.subscriptions);
    synchronizeConfiguration(api);
}
exports.activate = activate;
function synchronizeConfiguration(api) {
    if (!api)
        return;
    api.configurePlugin(pluginId, getConfiguration());
}
function getConfiguration() {
    const config = coc_nvim_1.workspace.getConfiguration(configurationSection);
    const outConfig = {};
    withConfigValue(config, 'tags', tags => {
        outConfig.tags = tags;
    });
    withConfigValue(config, 'validate', validate => {
        outConfig.validate = validate;
    });
    withConfigValue(config, 'lint', lint => {
        outConfig.lint = lint;
    });
    return outConfig;
}
function withConfigValue(config, key, withValue) {
    const configSetting = config.inspect(key);
    if (!configSetting) {
        return;
    }
    const value = config.get(key, undefined);
    if (typeof value !== 'undefined') {
        withValue(value);
    }
}


/***/ }),
/* 1 */
/***/ ((module) => {

module.exports = require("coc.nvim");;

/***/ })
/******/ 	]);
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })()

));